{"version":3,"sources":["components/Navbar.tsx","api.ts","store/PeopleContext.tsx","App.tsx","pages/HomePage.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink.tsx","components/PersonPage.tsx","components/PeopleTable.tsx","pages/PeoplePage.tsx","utils/preparedPeople.tsx","pages/NotFoundPage.tsx","Root.tsx","index.tsx"],"names":["Navbar","getLinkClass","isActive","cn","className","role","to","API_URL","wait","delay","Promise","resolve","setTimeout","getPeople","then","fetch","response","json","PeopleContext","React","createContext","PeopleProvider","children","useState","people","setPeople","useEffect","Provider","value","App","HomePage","replace","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","delete","Array","isArray","part","append","set","SearchLink","params","props","useSearchParams","searchParams","search","CENTURIES","PeopleFilters","setSearchParams","query","get","centuries","getAll","sex","type","placeholder","onChange","event","target","map","century","newCenturies","includes","filter","epoch","length","Loader","PersonLink","person","pathname","slug","name","PersonPage","selectedPerson","born","died","mother","motherName","father","fatherName","PeopleTable","useParams","personId","href","getPreparedPeople","find","PeoplePage","useContext","isLoading","setIsLoading","isError","setIsError","fetchData","peopleFromServer","visiblePeople","copyPeople","lowerQuery","toLowerCase","Math","ceil","preparedPeople","NotFoundPage","Root","path","element","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.fdd1394c.chunk.js","sourcesContent":["import cn from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nexport const Navbar = () => {\n  const getLinkClass = ({ isActive }: { isActive: boolean }) => cn(\n    'navbar-item',\n    { 'has-background-grey-lighter': isActive },\n  );\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={getLinkClass}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={getLinkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import React, { useContext, useEffect, useState } from 'react';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\n\ntype PeopleContextValues = {\n  people: Person[];\n  setPeople: React.Dispatch<React.SetStateAction<Person[]>>;\n};\n\nexport const PeopleContext = React.createContext({} as PeopleContextValues);\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const PeopleProvider: React.FC<Props> = ({ children }) => {\n  const [people, setPeople] = useState<Person[]>([]);\n\n  useEffect(() => {\n    getPeople().then(setPeople);\n  }, []);\n\n  return (\n    <PeopleContext.Provider value={{ people, setPeople }}>\n      {children}\n    </PeopleContext.Provider>\n  );\n};\n\nexport function usePeople() {\n  const people = useContext(PeopleContext);\n\n  return people;\n}\n","import './App.scss';\nimport { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\nimport { PeopleProvider } from './store/PeopleContext';\n\nexport const App = () => (\n  <PeopleProvider>\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </main>\n    </div>\n  </PeopleProvider>\n);\n","import { Navigate } from 'react-router-dom';\n\nexport const HomePage = () => {\n  return (\n    <>\n      <h1 className=\"title\">Home Page</h1>\n      <Navigate to=\"/\" replace />\n    </>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams,\n): string {\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import cn from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { getSearchWith } from '../utils/searchHelper';\nimport { SearchLink } from './SearchLink';\n\nconst CENTURIES = ['16', '17', '18', '19', '20'];\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n\n  function handleQueryChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setSearchParams(getSearchWith(searchParams, {\n      query: event.target.value || null,\n    }));\n  }\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink className=\"is-active\" params={{ sex: '' }}>All</SearchLink>\n        <SearchLink className=\"\" params={{ sex: 'm' }}>Male</SearchLink>\n        <SearchLink className=\"\" params={{ sex: 'f' }}>Female</SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {CENTURIES.map((century) => {\n              const newCenturies = centuries.includes(century)\n                ? centuries.filter(epoch => epoch !== century)\n                : [...centuries, century];\n\n              return (\n                <SearchLink\n                  key={century}\n                  data-cy=\"century\"\n                  className={cn('button', 'mr-1', {\n                    'is-info': centuries.includes(century),\n                  })}\n                  params={{ centuries: newCenturies }}\n                >\n                  {century}\n                </SearchLink>\n              );\n            })}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={cn(\n                'button',\n                'is-success',\n                { 'is-outlined': centuries.length },\n              )}\n              params={{ centuries: [] }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{ sex: null, centuries: [], query: null }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import cn from 'classnames';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\n\nconst FEMALE = 'f';\nconst FEMALE_COLOR = 'has-text-danger';\nconst MALE_COLOR = 'has-text-link';\n\ntype Props = {\n  person: Person\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      to={{\n        pathname: `${person.slug}`,\n        search: searchParams.toString(),\n      }}\n      className={cn({\n        [person.sex === FEMALE ? FEMALE_COLOR : MALE_COLOR]: '',\n      })}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","import cn from 'classnames';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\n\ntype Props = {\n  person: Person;\n  selectedPerson: string;\n};\n\nexport const PersonPage: React.FC<Props> = ({ person, selectedPerson }) => {\n  return (\n    <tr\n      data-cy=\"person\"\n      className={\n        cn({\n          'has-background-warning': selectedPerson === person.slug,\n        })\n      }\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n\n      <td>{person.sex}</td>\n      <td>{person.born}</td>\n      <td>{person.died}</td>\n      <td>\n        {person.mother\n          ? (\n            <PersonLink person={person.mother} />\n          ) : (\n            person.motherName || '-'\n          )}\n      </td>\n      <td>\n        {person.father\n          ? (\n            <PersonLink person={person.father} />\n          ) : (\n            person.fatherName || '-'\n          )}\n      </td>\n    </tr>\n  );\n};\n","import { useParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { PersonPage } from './PersonPage';\n\nexport const PeopleTable = ({ people }: { people: Person[] }) => {\n  const { personId = '' } = useParams();\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <a href=\"#/people?sort=name\">\n                <span className=\"icon\">\n                  <i className=\"fas fa-sort\" />\n                </span>\n              </a>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <a href=\"#/people?sort=sex\">\n                <span className=\"icon\">\n                  <i className=\"fas fa-sort\" />\n                </span>\n              </a>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <a href=\"#/people?sort=born&amp;order=desc\">\n                <span className=\"icon\">\n                  <i className=\"fas fa-sort-up\" />\n                </span>\n              </a>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <a href=\"#/people?sort=died\">\n                <span className=\"icon\">\n                  <i className=\"fas fa-sort\" />\n                </span>\n              </a>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map((person) => (\n          <PersonPage\n            person={person}\n            key={person.slug}\n            selectedPerson={personId}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { PeopleFilters } from '../components/PeopleFilters';\nimport { Loader } from '../components/Loader';\nimport { PeopleTable } from '../components/PeopleTable';\n\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport { usePeople } from '../store/PeopleContext';\nimport { preparedPeople } from '../utils/preparedPeople';\n\nconst getPreparedPeople = (people: Person[]): Person[] => {\n  return people.map(person => {\n    return {\n      ...person,\n      mother: people.find(mother => mother.name === person.motherName),\n      father: people.find(father => father.name === person.fatherName),\n    };\n  });\n};\n\nexport const PeoplePage = () => {\n  const { people, setPeople } = usePeople();\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isError, setIsError] = useState<boolean>(false);\n  const [searchParams] = useSearchParams();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setIsLoading(true);\n        const peopleFromServer = await getPeople();\n\n        setPeople(getPreparedPeople(peopleFromServer));\n      } catch (error) {\n        setIsError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const visiblePeople = preparedPeople(searchParams, people);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            <PeopleFilters />\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && (\n                <Loader />\n              )}\n\n              {isError && !isLoading && (\n                <p\n                  data-cy=\"peopleLoadingError\"\n                  className=\"has-text-danger\"\n                >\n                  Something went wrong\n                </p>\n              )}\n\n              {!people?.length && !isLoading && !isError && (\n                <p\n                  data-cy=\"noPeopleMessage\"\n                >\n                  There are no people on the server\n                </p>\n              )}\n\n              {!!people?.length && !isError && (\n                <PeopleTable people={visiblePeople} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Person } from '../types';\n\nexport const preparedPeople = (\n  searchParams: URLSearchParams,\n  people: Person[],\n) => {\n  const query = searchParams.get('query') || null;\n  const centuries = searchParams.getAll('centuries') || null;\n  const sex = searchParams.get('sex') || null;\n\n  let copyPeople = [...people];\n  const lowerQuery = query?.toLowerCase();\n\n  if (lowerQuery) {\n    copyPeople = copyPeople.filter(person => {\n      return person.name.toLowerCase()\n        .includes(lowerQuery)\n        || person.motherName?.toLowerCase()\n          .includes(lowerQuery)\n        || person.fatherName?.toLowerCase()\n          .includes(lowerQuery);\n    });\n  }\n\n  if (centuries.length) {\n    copyPeople = copyPeople.filter(person => {\n      return centuries\n        .includes(Math.ceil(person.born / 100).toString());\n    });\n  }\n\n  if (sex) {\n    copyPeople = copyPeople.filter(person => {\n      return person.sex === sex;\n    });\n  }\n\n  return copyPeople;\n};\n","export const NotFoundPage = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import {\n  HashRouter as Router,\n  Routes,\n  Route,\n  Navigate,\n} from 'react-router-dom';\n\nimport { App } from './App';\n\nimport { HomePage } from './pages/HomePage';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\n\nexport const Root = () => (\n  <Router>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route path=\"*\" element={<NotFoundPage />} />\n        <Route index element={<HomePage />} />\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n        <Route path=\"people\" element={<PeoplePage />}>\n          <Route path=\":personId?\" />\n        </Route>\n      </Route>\n    </Routes>\n  </Router>\n);\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}